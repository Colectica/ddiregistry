// <auto-generated />
using System;
using Ddi.Registry.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Ddi.Registry.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190213215421_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Ddi.Registry.Data.Agency", b =>
                {
                    b.Property<string>("AgencyId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdminContactId");

                    b.Property<int>("ApprovalState");

                    b.Property<string>("CreatorId");

                    b.Property<DateTime?>("DateApproved");

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Label");

                    b.Property<DateTime>("LastModified");

                    b.Property<string>("TechnicalContactId");

                    b.HasKey("AgencyId");

                    b.HasIndex("AdminContactId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("TechnicalContactId");

                    b.ToTable("Agencies");
                });

            modelBuilder.Entity("Ddi.Registry.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("City");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Country");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("HomePage");

                    b.Property<string>("JobTitle");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("Organization");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("State");

                    b.Property<string>("StreetAddress");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<string>("Zip");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Ddi.Registry.Data.Assignment", b =>
                {
                    b.Property<string>("AssignmentId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AgencyId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<bool>("IsDelegated");

                    b.Property<DateTime>("LastModified");

                    b.HasKey("AssignmentId");

                    b.HasIndex("AgencyId");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("Ddi.Registry.Data.Delegation", b =>
                {
                    b.Property<string>("DelegationId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AssignmentId");

                    b.Property<string>("NameServer")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("DelegationId");

                    b.HasIndex("AssignmentId");

                    b.ToTable("Delegations");
                });

            modelBuilder.Entity("Ddi.Registry.Data.ExportAction", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("LastExport");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<long?>("LastSoa");

                    b.HasKey("Id");

                    b.ToTable("ExportActions");
                });

            modelBuilder.Entity("Ddi.Registry.Data.Service", b =>
                {
                    b.Property<string>("ServiceId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AssignmentId")
                        .IsRequired();

                    b.Property<string>("Hostname")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int>("Port");

                    b.Property<int>("Priority");

                    b.Property<string>("Protocol")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("TimeToLive");

                    b.Property<int>("Weight");

                    b.HasKey("ServiceId");

                    b.HasIndex("AssignmentId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Ddi.Registry.Data.Agency", b =>
                {
                    b.HasOne("Ddi.Registry.Data.ApplicationUser", "AdminContact")
                        .WithMany()
                        .HasForeignKey("AdminContactId");

                    b.HasOne("Ddi.Registry.Data.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");

                    b.HasOne("Ddi.Registry.Data.ApplicationUser", "TechnicalContact")
                        .WithMany()
                        .HasForeignKey("TechnicalContactId");
                });

            modelBuilder.Entity("Ddi.Registry.Data.Assignment", b =>
                {
                    b.HasOne("Ddi.Registry.Data.Agency", "Agency")
                        .WithMany("Assignments")
                        .HasForeignKey("AgencyId");
                });

            modelBuilder.Entity("Ddi.Registry.Data.Delegation", b =>
                {
                    b.HasOne("Ddi.Registry.Data.Assignment", "Assignment")
                        .WithMany("Delegations")
                        .HasForeignKey("AssignmentId");
                });

            modelBuilder.Entity("Ddi.Registry.Data.Service", b =>
                {
                    b.HasOne("Ddi.Registry.Data.Assignment", "Assignment")
                        .WithMany("Services")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Ddi.Registry.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Ddi.Registry.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Ddi.Registry.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Ddi.Registry.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
